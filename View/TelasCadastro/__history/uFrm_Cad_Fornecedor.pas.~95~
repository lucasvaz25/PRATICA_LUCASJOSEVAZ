unit uFrm_Cad_Fornecedor;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  UFrm_Cadastro,
  Vcl.Buttons,
  Vcl.StdCtrls,
  VazEdit,
  Vcl.ExtCtrls,
  Vcl.Mask,
  VazMaskEdit,
  Vcl.Imaging.Pngimage,
  UFornecedoresController,
  UCidadesController,
  UCondicaoPagamentoController;

type
  TFrm_Cad_Fornecedor = class( TFrm_Cadastro )
    LblNome: TLabel;
    EdNome: TVazEdit;
    LblNomeFantasia: TLabel;
    EdNomeFantasia: TVazEdit;
    LblIE: TLabel;
    EdIE: TVazEdit;
    EdTelefone: TVazMaskEdit;
    LblTelefone: TLabel;
    LblEmail: TLabel;
    EdEmail: TVazEdit;
    EdCEP: TVazMaskEdit;
    EdLogradouro: TVazEdit;
    LblLogradouro: TLabel;
    LblBairro: TLabel;
    EdBairro: TVazEdit;
    EdNum: TVazEdit;
    LblNum: TLabel;
    EdCidade: TVazEdit;
    LblCidade: TLabel;
    EdUF: TVazEdit;
    LblUF: TLabel;
    PnlPesquisar: TPanel;
    ImgPesquisar: TImage;
    LblCEP: TLabel;
    EdContato: TVazEdit;
    LblContato: TLabel;
    EdSite: TVazEdit;
    Lblsite: TLabel;
    EdCNPJ: TVazMaskEdit;
    LblCNPJ: TLabel;
    RgTpPessoa: TRadioGroup;
    EdCodCidade: TVazEdit;
    LblCodCidade: TLabel;
    LblCodCondPag: TLabel;
    EdCodCondPag: TVazEdit;
    LblCondPag: TLabel;
    EdCondPag: TVazEdit;
    PnlPesquisaCondPag: TPanel;
    ImgPesquisaCondPag: TImage;
    procedure FormCreate( Sender: TObject );
    procedure FormShow( Sender: TObject );
  private
    { Private declarations }
    CidadeControl: TCidadesController;
    CondPagControl: TCondicaoPagamentoController;
    procedure PopulaObj;
    procedure PopulaForm;
    function ValidaForm: Boolean;
    procedure ConsultarCondPag;
    procedure PesquisaBtnCondPag;
    procedure ConsultarCidade;
    procedure PesquisaBtnCidade;
    function GetTpDoc: string;
  public
    { Public declarations }
    FornecedorControl: TFornecedoresController;
    procedure Salvar; override;
    procedure Sair; override;
  end;

var
  Frm_Cad_Fornecedor: TFrm_Cad_Fornecedor;

implementation

uses
  System.Contnrs,
  UEnum,
  UToolsSistema,
  UFilterSearch,
  UCondicaoPagamento,
  UCidades,
  UFornecedores,
  UFrm_Consulta_Cidades,
  UFrm_Consulta_CondicaoPagamento;

{$R *.dfm}

{ TFrm_Cad_Fornecedor }

procedure TFrm_Cad_Fornecedor.ConsultarCidade;
var
  Filtro: TFilterSearch;
  List: TObjectlist;
begin
  if EdCodCidade.Text <> '' then
  begin
    Filtro := TFilterSearch.Create;
    try
      Filtro.TipoConsulta := TpCCodigo;
      Filtro.RecuperarObj := True;
      Filtro.Codigo       := StrToInt( EdCodCidade.Text );
      List                := CidadeControl.Consulta( Filtro );
      if List.Count > 0 then
      begin
        EdCidade.Text := TCidade( List[ 0 ] ).Cidade;
        EdUF.Text     := TCidade( List[ 0 ] ).Estado.UF;
        FornecedorControl.GetEntity.Cidade.CopiarDados( TCidade( List[ 0 ] ) );
      end
      else
      begin
        ShowMessage( 'Cidade não encontrado!!' );
        EdCodCidade.Clear;
        EdCidade.SetFocus;
        EdUF.Clear;
      end;
    finally
      Filtro.Free;
    end;
  end;
end;

procedure TFrm_Cad_Fornecedor.ConsultarCondPag;
var
  Filtro: TFilterSearch;
  List: TObjectlist;
begin
  if EdCodCondPag.Text <> '' then
  begin
    Filtro := TFilterSearch.Create;
    try
      Filtro.TipoConsulta := TpCCodigo;
      Filtro.Codigo       := StrToInt( EdCodCondPag.Text );
      List                := CondPagControl.Consulta( Filtro );
      if List.Count > 0 then
      begin
        EdCondPag.Text := TCondicaoPagamento( List[ 0 ] ).CondPag;
        FornecedorControl.GetEntity.CondPagamento.CopiarDados
                    ( TCondicaoPagamento( List[ 0 ] ) );
      end
      else
      begin
        ShowMessage( 'Condição de Pagamento não encontrado!!' );
        EdCodCondPag.Clear;
        EdCondPag.SetFocus;
      end;
    finally
      Filtro.Free;
    end;
  end;
end;

procedure TFrm_Cad_Fornecedor.FormCreate( Sender: TObject );
begin
  inherited;
  FornecedorControl := nil;
  FornecedorControl.GetInstance( FornecedorControl, Self );

  CondPagControl := nil;
  CondPagControl.GetInstance( CondPagControl, Self );

  CidadeControl := nil;
  CidadeControl.GetInstance( CidadeControl, Self );
end;

procedure TFrm_Cad_Fornecedor.FormShow( Sender: TObject );
begin
  inherited;
  if not( EdCodigo.Text = '0' ) then
    PopulaForm;
end;

function TFrm_Cad_Fornecedor.GetTpDoc: string;
begin
  if ( Length( EdCNPJ.Text ) = 11 ) then
    Result := 'CPF'
  else if ( Length( EdCNPJ.Text ) = 14 ) then
    Result := 'CNPJ'
  else
    Result := '';
end;

procedure TFrm_Cad_Fornecedor.PesquisaBtnCidade;
var
  Frm: TFrm_Consulta_Cidades;
begin
  inherited;
  Frm := TFrm_Consulta_Cidades.Create( Self );
  try
    Frm.IsSelecionar := True;
    Frm.ShowModal;
    EdCidade.Text    := Frm.CidadeControl.GetEntity.Cidade;
    EdCodCidade.Text := IntToStr( Frm.CidadeControl.GetEntity.Codigo );
    FornecedorControl.GetEntity.Cidade.CopiarDados( Frm.CidadeControl.GetEntity );
  finally
    Frm.Release;
  end;
end;

procedure TFrm_Cad_Fornecedor.PesquisaBtnCondPag;
var
  Frm: TFrm_Consulta_CondicaoPagamento;
begin
  inherited;
  Frm := TFrm_Consulta_CondicaoPagamento.Create( Self );
  try
    Frm.IsSelecionar := True;
    Frm.ShowModal;
    EdCondPag.Text    := Frm.CondPagControl.GetEntity.CondPag;
    EdCodCondPag.Text := IntToStr( Frm.CondPagControl.GetEntity.Codigo );
    FornecedorControl.GetEntity.CondPagamento.CopiarDados
                ( Frm.CondPagControl.GetEntity );
  finally
    Frm.Release;
  end;
end;

procedure TFrm_Cad_Fornecedor.PopulaForm;
begin
  with FornecedorControl.GetEntity do
  begin
    EdCodigo.Text        := IntToStr( Codigo );
    EdNome.Text          := Nome;
    EdIE.Text            := RG;
    EdBairro.Text        := Bairro;
    EdCNPJ.Text          := CPF;
    EdCEP.Text           := CEP;
    EdNum.Text           := Numero;
    EdNomeFantasia.Text  := Apelido;
    EdLogradouro.Text    := Endereco;
    EdTelefone.Text      := Telefone;
    EdEmail.Text         := Email;
    EdCidade.Text        := Cidade.Cidade;
    EdCodCidade.Text     := IntToStr( Cidade.Codigo );
    EdUF.Text            := Cidade.Estado.UF;
    EdCondPag.Text       := CondPagamento.CondPag;
    EdCodCondPag.Text    := IntToStr( CondPagamento.Codigo );
    EdContato.Text       := Contato;
    EdSite.Text          := Site;
    RgTpPessoa.ItemIndex := Integer( TpPessoa );
  end;
end;

procedure TFrm_Cad_Fornecedor.PopulaObj;
begin
  with FornecedorControl.GetEntity do
  begin
    Codigo                := StrToInt( EdCodigo.Text );
    Nome                  := UpperCase( EdNome.Text );
    RG                    := EdIE.Text;
    Bairro                := UpperCase( EdBairro.Text );
    CPF                   := EdCNPJ.Text;
    CEP                   := EdCEP.Text;
    Numero                := EdNum.Text;
    Apelido               := EdNomeFantasia.Text;
    Endereco              := EdLogradouro.Text;
    Telefone              := EdTelefone.Text;
    Email                 := EdEmail.Text;
    Cidade.Cidade         := EdCidade.Text;
    Cidade.Codigo         := StrToInt( EdCodCidade.Text );
    Cidade.Estado.UF      := EdUF.Text;
    CondPagamento.CondPag := EdCondPag.Text;
    CondPagamento.Codigo  := StrToInt( EdCodCondPag.Text );
    Contato               := EdContato.Text;
    Site                  := EdSite.Text;
    TpPessoa              := TTipoPessoa( RgTpPessoa.ItemIndex );
  end;
end;

procedure TFrm_Cad_Fornecedor.Sair;
begin
  inherited;

end;

procedure TFrm_Cad_Fornecedor.Salvar;
var
  Aux: TObject;
begin
  inherited;
  if ValidaForm then
  begin

    PopulaObj;
    Aux := FornecedorControl.GetEntity;
    if EdCodigo.Text = '0' then
      Salvou := FornecedorControl.Inserir( Aux )
    else
      Salvou := FornecedorControl.Editar( Aux );

    Self.Sair;
  end
end;

function TFrm_Cad_Fornecedor.ValidaForm: Boolean;
begin
  Result := False;

  if Length( EdNome.Text ) < 3 then
  begin
    MessageDlg( 'Informe um fornecedor válido!!', MtInformation, [ MbOK ], 0 );
    EdNome.SetFocus;
    Exit;
  end;

  if ( EdCodCidade.Text = '' ) or ( EdCidade.Text = '' ) then
  begin
    MessageDlg( 'Selecione uma Cidade válida!!', MtInformation, [ MbOK ], 0 );
    EdCidade.SetFocus;
    Exit;
  end;

  if ( EdCondPag.Text = '' ) or ( EdCodCondPag.Text = '' ) then
  begin
    MessageDlg( 'Insira uma Condição de Pagamento válida!!', MtInformation, [ MbOK ], 0 );
    EdCodCondPag.SetFocus;
    Exit;
  end;

  if RgTpPessoa.ItemIndex = 0 then
  begin
    if TToolsSistema.ValidarCPF( EdCNPJ.Text ) then
    begin
      MessageDlg( 'Informe um CPF válido!!', MtInformation, [ MbOK ], 0 );
      EdCNPJ.SetFocus;
      Exit;
    end;
  end
  else
  begin
    // validacaoCNPJ
  end;

  if EdCodigo.Text = '0' then
    if FornecedorControl.VerificaExisteCPF_CNPJ( UpperCase( EdCNPJ.Text ) ) then
    begin
      MessageDlg( 'Já existe um Fornecedor com esse '
                  + GetTpDoc + '!!', MtInformation, [ MbOK ], 0 );
      EdNome.SetFocus;
      Exit;
    end;

  Result := True;
end;

end.
